#!/bin/bash
#
# Job Name and Files (also --job-name)
#SBATCH -J abalone_minmax
#
# Output and error (also --output, --error):
#SBATCH -o job_%j.out
#SBATCH -e job_%j.err
#
# Wall clock limit:
#SBATCH --time=02:00:00
#SBATCH --account=your_account
#SBATCH --partition=test
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --mail-type=END,FAIL
#SBATCH --mail-user=your_email@example.com

# Load any necessary modules
module load gcc
module load openmpi

# List of threads to test
threads=(2 4 6 8)
depths=(2 3 4 5)
positions=("default" "position-midgame1 X" "position-midgame2" "position-endgame X")

# Compile the program (if not already compiled)
make clean
make

for t in "${threads[@]}"
do
  for d in "${depths[@]}"
  do
    export OMP_NUM_THREADS=$t
    echo "Running with $t threads, depth $d"
    
    # Test default starting position
    ./player -v -s 2 -n -1 $d O &
    ./player -v -s 2 -n -1 $d X &
    ./start -v -n > output_${t}_threads_${d}_depth_default.txt
    
    # Test specific starting positions
    for p in "${positions[@]}"
    do
      echo "Running with $t threads, depth $d, position $p"
      if [ "$p" == "default" ]; then
        ./player -v -s 2 -n -1 $d O &
        ./player -v -s 2 -n -1 $d X &
        ./start -v -n > output_${t}_threads_${d}_depth_${p}.txt
      else
        ./player -v -s 2 -n -1 $d O &
        ./player -v -s 2 -n -1 $d X &
        ./start -v -n $p > output_${t}_threads_${d}_depth_${p}.txt
      fi
    done
  done
done
